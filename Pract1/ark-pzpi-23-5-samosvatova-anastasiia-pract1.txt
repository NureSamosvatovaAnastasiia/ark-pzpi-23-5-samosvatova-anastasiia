МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ




Звіт
з практичного заняття №1 з дисципліни
аналіз та рефакторінг коду




Виконала:                                                                           Перевірив:
ст. гр. ПЗПІ-23-5                        				ст. викладач кафедри ПІ
Самосватова А.Р.						          Сокорчук Ігор Петрович



Харків 2025
ІСТОРІЯ ЗМІН
      №      ДатаВерсія звіту      Опис змін та виправлень      1      05.10.2025      0.1      Початкова версія



1 МЕТА РОБОТИ
     Сформувати розуміння важливості дотримання правил оформлення програмного коду та вивчити основні рекомендації написання коду для обраної мови програмування. Навчитися застосовувати принципи code convention з метою підвищення читабельності, структурованості та зрозумілості програмного забезпечення.
     2 ОПИС ВИКОНАНОЇ РОБОТИ
     У межах цієї доповіді для демонстрації правил оформлення коду було обрано мову програмування Python у контексті веб-розробки. Python є однією з найпопулярніших мов сучасності, яка широко застосовується у різних сферах, зокрема для веб-розробки (наприклад, з використанням фреймворків Django або Flask), автоматизації процесів, обробки даних та наукових обчислень. Його універсальність і простота синтаксису зумовлюють високу потребу у дотриманні єдиних стандартів оформлення коду, що забезпечує його зрозумілість, логічну структурованість та полегшує співпрацю між розробниками у команді. Важливо усвідомлювати, що код пишеться не лише для комп’ютера, який виконує інструкції, але насамперед для людей, які його створюють, читають та підтримують. Саме тому існують стандарти кодування, такі як PEP 8, які визначають правила форматування, іменування змінних, функцій та класів, структуру коментарів і використання документації. Дотримання цих правил є критично важливим для командної розробки, оскільки воно забезпечує єдиний стиль коду, знижує ймовірність синтаксичних і логічних помилок та сприяє ефективній взаємодії між розробниками. Стандартизований код легше підтримувати та розширювати, а нові члени команди швидше адаптуються до існуючої бази коду веб-проєкту. Завдяки дотриманню правил оформлення Python-коду забезпечується висока читабельність, зручність підтримки, зменшення кількості помилок та підвищення ефективності розробки, оскільки розробники витрають менше часу на пояснення логіки та розуміння чужих фрагментів програми. У програмуванні важливо не лише створювати працюючий код, а й робити його зрозумілим для інших розробників. Правила оформлення коду забезпечують єдиний стиль написання, підвищують читабельність і зменшують кількість помилок. Python — мова, що робить акцент саме на читабельності: структура програми безпосередньо залежить від правильного форматування, відступів та зрозумілих імен. Добре оформлений код легше перевіряти, тестувати й змінювати. Дотримання стандартів, таких як PEP 8, дозволяє команді працювати узгоджено, не витрачаючи час на розбір заплутаних фрагментів. Для прикладу, у фрагменті нижче (рядки 1-2 та 1-3) видно, як одна й та сама функція може бути оформлена добре або погано.
    1. # Поганий приклад
    2. def f(x):return x*2+1
    
    1. # Гарний приклад
    2. def double_plus_one(x):
    3. return x * 2 + 1

     У першому випадку назва функції незрозуміла, код злитий і важкий для сприйняття. У другому - зрозуміла назва, правильні відступи й пробіли. Таке оформлення відповідає стандартам Python і робить код зрозумілим навіть без додаткових пояснень.
     Правильна структура коду є основою для зручності роботи над проектом і подальшої підтримки програми. Вона передбачає чітку організацію файлів і логічний поділ на модулі та класи У Python кожен файл із розширенням .py вважається модулем, а у веб-фреймворках, як-от Django чи Flask, ця структура стає ще більш важливою. Доцільно розділяти код за функціональністю — наприклад, у Django це окремі файли models.py, views.py, urls.py , як можна побачити нижче (рядки 1-13), а у Flask — використання "креслень" (blueprints) для логічного групування. Це робить проект більш зрозумілим і полегшує його розширення. Логічне групування коду у класи (наприклад, Views у Django або Resources у Flask-RESTful) дозволяє уникати дублювання функцій і спрощує роботу з великими системами. Для навігації всередині файлів варто використовувати короткі коментарі, які розділяють секції коду, наприклад, блоки обробників запитів (views) або опис логічних частин. Такий підхід створює структуру, де кожен фрагмент має своє місце і призначення.
1. from django.contrib import admin
2. from django.urls import path, include
3. 
4. urlpatterns = [
5.     path('admin/', admin.site.urls),
6.     
7.     # Всі URL, що починаються з 'products/', 
8.     # будуть оброблені у файлі 'products.urls'
9.     path('products/', include('products.urls')), 
10.     
11.     # Всі URL, що починаються з 'accounts/',
12.     # будуть оброблені у 'accounts.urls'
13.     path('accounts/', include('accounts.urls')),
14. ]
     Форматування коду є однією з найважливіших складових чистого та зрозумілого програмування. Відступи, вирівнювання та довжина рядків безпосередньо впливають на читабельність програми. У Python відступи обов’язкові для визначення блоків коду, тому правильне використання 4 пробілів замість табуляції є стандартом і суворо рекомендоване PEP 8. Пробіли слід використовувати також навколо операторів і після коми, щоб покращити сприйняття коду. Довжина рядків не повинна перевищувати 79 символів для основного тексту та 72 символів для коментарів і докстрінгів, що допомагає зручно працювати з кодом на різних екранах і в редакторах. Для дужок, таких як круглі, квадратні та фігурні, рекомендується розміщувати закриваючу дужку на новому рядку, якщо ви переносите вираз, а відкриваючу ставити поруч із першим елементом. Усі ці правила разом забезпечують однорідний, зрозумілий і легко підтримуваний код, що є критично важливим у командній розробці. Приклад правильного розміщення можна побачити нижче, на рядках 1-11
1. # Приклад правильного форматування
2. def calculate_area(width, height):
3. """Повертає площу прямокутника."""
4. area = width * height
5. return area
6. 
7. 
8. numbers = [1, 2, 3, 4, 5]
9. total = sum(
10. numbers
11. )  

     Іменування змінних, функцій і класів у Python має важливе значення для читабельності та підтримуваності коду. Для змінних і функцій (наприклад, view-функцій або сервісних функцій) використовується стиль snake_case, коли всі літери малі, а слова розділені підкресленням, наприклад user_age, get_user_profile, process_payment_request. Для класів (наприклад, моделей Django, серіалізаторів або класів View) застосовується стиль CamelCase, де кожне слово починається з великої літери, наприклад UserProfile, ProductSerializer, UserLoginView. При виборі імен важливо дотримуватися принципів зрозумілості, лаконічності та унікальності: ім’я має відразу показувати призначення змінної чи функції, бути достатньо коротким і не дублювати інші імена у межах однієї області видимості. Слід уникати «магічних» чисел і рядків у коді, особливо у налаштуваннях (settings.py) або бізнес-логіці. Замість цього рекомендується створювати константи з осмисленими іменами у верхньому регістрі, наприклад MAX_LOGIN_ATTEMPTS = 5 або STRIPE_API_KEY = "sk_...", і використовувати їх у функціях. Дотримання цього формату можна побачити на рядках 1-21
       1. # Константи
       2. MAX_RETRIES = 5
       3. DISCOUNT_RATE = 0.1
       4. 
       5. # Клас користувача
       6. class User:
       7.     def __init__(self, name, age):
       8.         self.name = name
       9.         self.age = age
       10. 
       11. # Функції
       12. def calculate_discount(price):
       13.     return price * DISCOUNT_RATE
       14. 
       15. def is_adult(user):
       16.     return user.age >= 18
       17. 
       18. # Змінні
       19. user1 = User("Anastasiia", 20)
       20. discounted_price = calculate_discount(100)
       21. adult_status = is_adult(user1)

     Коментарі в Python мають велике значення для зрозумілості та підтримуваності коду. Коментарі, які суперечать коду, гірші за їхню відсутність, тому важливо оновлювати їх щоразу, коли змінюється код. Коментарі повинні бути повними реченнями, перше слово має починатися з великої літери, якщо це не ім’я змінної або функції, а кожне речення закінчувати крапкою. Блокові коментарі застосовуються до певного коду, що йде після них, і відступаються на той же рівень, що й код. Кожен рядок блоку починається з # та одного пробілу. Параграфи всередині блоку розділяються рядком з одним символом #. Вбудовані коментарі (inline comments) використовують рідко. Вони пишуться на тій же лінії, що й оператор, і відокремлюються мінімум двома пробілами. Їх не слід використовувати для очевидних дій, Але вони корисні для пояснення неочевидних деталей (наприклад, складної бізнес-логіки у view). Документування коду в Python здійснюється за допомогою спеціалізованих коментарів, званих docstrings, які використовуються для модулів, класів і функцій. Docstrings дозволяють створювати автоматичну документацію, яку можна переглядати через вбудовану функцію help() або генератори документації, такі як Sphinx. Sphinx дозволяє перетворювати docstrings у структуровану документацію у форматі HTML, PDF або інших форматах, підтримує різні стилі оформлення та автоматично формує індекси, посилання на класи, функції та приклади використання, що значно полегшує підтримку великих веб-проєктів. Формат та структура docstrings: багаторядковий docstring оформлюється трійними лапками """ """. Перший рядок містить короткий опис призначення модуля, класу або функції. Наступні рядки (опційно) пояснюють деталі реалізації, включають приклади використання, опис параметрів та значення, що повертається. Для непублічних методів достатньо короткого коментаря після рядка def, який пояснює призначення методу. Типи документації у docstrings включають: приклади використання, опис параметрів та значення, що повертається. Наприклад, view-функція для отримання деталей продукту може мати docstring (рядок 1-23), який описує параметри request і product_id з типами, пояснює, що повертається HttpResponse, і наводить приклад використання. 
1. from django.shortcuts import render, get_object_or_404
2. from django.http import HttpRequest, HttpResponse, Http404
3. from .models import Product  # Імпортуємо модель
4. def get_product_details(request: HttpRequest, product_id: int) -> HttpResponse:
5.     """
6.     Відображає сторінку з детальною інформацією про продукт.
7.     Параметри:
8.         request (HttpRequest): Об'єкт запиту Django.
9.         product_id (int): ID продукту для відображення (отримується з URL).
10.     Повертає:
11.         HttpResponse: Сторінка з деталями продукту або 404.
12.     Викликає:
13.         Http404: Якщо продукт з таким ID не знайдено.
14. 
15.     Приклад використання (в urls.py):
16.         path('product/<int:product_id>/', views.get_product_details, name='product_detail')
17.     """
18.     product = get_object_or_404(Product, pk=product_id)
19.    
20.     context = {
21.         'product': product,
22.     }
23.     return render(request, 'products/product_detail.html', context)

     Клас моделі Django може мати docstring (рядок 1-23) із описом призначення класу та його полів (атрибутів). Використання docstrings і Sphinx робить код зрозумілим, структурованим та легко підтримуваним, дозволяючи швидко орієнтуватися у функціональності програми та генерувати наочну документацію для інших розробників. 

       1. from django.db import models
       2. 
       3. class Product(models.Model):
       4.     """
       5.     Модель, що представляє продукт в інтернет-магазині.
       6. 
       7.     Цей клас відповідає за зберігання в базі даних
       8.     всієї ключової інформації про товар, 
       9.     включаючи його назву, ціну та поточний статус.
       10.     
       11.     Атрибути:
       12.         name (CharField): Назва продукту (до 255 символів).
       13.         price (DecimalField): Ціна продукту з точністю 
       14.                               до 2 знаків після коми.
       15.         is_available (BooleanField): Чи є продукт в наявності.
       16.                                      Якщо False, товар не 
       17.                                      відображається у загальному 
       18.                                      каталозі.
       19.     """
     
     У Python існує чітко визначений набір конвенцій стилю кодування, відомий як PEP 8. Ці правила регламентують відступи, довжину рядків, іменування змінних, функцій і класів, розташування дужок, коментарів та docstrings. Дотримання PEP 8 робить код чистим, зрозумілим і легким для підтримки, особливо в командних веб-проєктах. Основні моменти включають використання 4 пробілів для відступів, обмеження довжини рядка до 79 символів, стилі іменування, обов’язкові docstrings для модулів, функцій і класів, а також розумне використання коментарів. Для автоматичної перевірки дотримання стилю існують спеціальні інструменти: Pylint, який аналізує код на відповідність стандартам PEP 8 і наявність помилок; Flake8, легкий і швидкий інструмент для перевірки стилю та синтаксису (часто використовується з плагінами типу flake8-django); Black, форматувач коду, який автоматично виправляє стиль відповідно до стандартів; isort, який автоматично сортує імпорти у правильному порядку; а також IDE, такі як PyCharm або VS Code, з вбудованою перевіркою стилю та інтеграцією з Pylint, Black та іншими інструментами. Використання цих інструментів дозволяє підтримувати код у єдиному стилі без зайвих витрат часу, зменшує ризик помилок і спрощує командну розробку. Наприклад, командою black my_project_directory/ можна автоматично виправити відступи, пробіли та інші елементи стилю у всьому проєкті.
     Кодування на основі тестування, або Test-Driven Development (TDD), — це підхід до розробки програмного забезпечення, при якому тести пишуться до написання самого коду. Основна ідея TDD полягає у трьох кроках: спочатку пишеться тест, який перевіряє певну (наприклад, поведінку API-ендпоінта); потім пишеться мінімальна кількість коду, щоб цей тест пройшов; після цього код рефакториться для покращення структури, зберігаючи проходження всіх тестів. Такий підхід допомагає організувати код з урахуванням тестів, робить його більш модульним і зрозумілим, зменшує кількість помилок і спрощує підтримку. При написанні тестів у TDD важливо дотримуватися кількох принципів: тести повинні бути модульними, тобто перевіряти окремі view-функції, моделі або сервіси; ізольованими, щоб результат одного тесту не залежав від інших (наприклад, тести до бази даних мають бути очищені); і зрозумілими, щоб легко було визначити, що перевіряється. Використання зрозумілих назв тестів і простих прикладів допомагає швидко знаходити проблеми і підтримувати код у майбутньому. У Python для TDD найчастіше використовуються стандартні бібліотеки, такі як unittest або сучасні фреймворки pytest, а також спеціалізовані бібліотеки, як-от pytest-django або pytest-flask з їхніми тест-клієнтами. Наприклад, перед написанням view-функції для головної сторінки спочатку пишеться тест (рядок 1-16), який перевіряє, що ця сторінка повертає коректний статус-код, а потім реалізується сама функція (рядок 1-10). Такий підхід дозволяє гарантувати правильність коду з самого початку та робить процес розробки більш передбачуваним і надійним.
       
1. import pytest
2. from django.urls import reverse
3. @pytest.mark.django_db
4. def test_homepage_status_code(client):
5.     """
6.     Тест: Перевіряє, що головна сторінка ('/') доступна 
7.     і повертає статус-код 200 OK.
8.     """
9.     try:
10.         url = reverse('home')
11.     except Exception:
12.         # Тест впаде тут, бо URL 'home' ще не існує
13.         url = '/' 
14. 
15.     response = client.get(url)
16.     assert response.status_code == 200

1. from django.shortcuts import render 
2. """
3. Головна сторінка
4. Використовує HTML-шаблон для відображення.
5. =
6. """
7. context = {
8. 'page_title': 'Головна',
9. }
10. return render(request, 'products/home.html', context)

     Для підтримки якості коду в Python широко використовуються інструменти та автоматизація, що дозволяють зменшити кількість помилок, дотримуватися стандартів стилю і спрощувати командну розробку. Статичний аналіз коду - це процес перевірки програми без її запуску. Він допомагає виявити синтаксичні помилки, потенційні баги, порушення стилю та невикористовувані змінні. У Python популярними інструментами є Pylint, який перевіряє відповідність PEP 8 і загальні помилки, Flake8, що швидко виявляє проблеми стилю та синтаксису, а також mypy для перевірки типів у коді з анотаціями типів. Інструменти форматування та автоматизації дозволяють підтримувати код у єдиному стилі без ручного виправлення. Наприклад, Black автоматично виправляє відступи, пробіли та розташування дужок відповідно до PEP 8, а isort сортує імпорти у правильному порядку. Для командної розробки зручно використовувати Git Hooks або CI/CD, щоб запускати ці інструменти автоматично перед комітом або при розгортанні (deploy) веб-додатку. Автоматичні перевірки стилю коду забезпечують постійну відповідність стандартам і зменшують ризик появи неконсистентного коду. Наприклад, можна налаштувати CI (GitHub Actions, GitLab CI/CD, Jenkins), щоб при кожному пуші коду автоматично запускалися Pylint, Flake8 і Black, а також набір юніт-тестів (pytest). Це дозволяє команді зосередитися на логіці програми, не витрачаючи час на ручне виправлення стилю та дрібних помилок. Оформлення коду безпосередньо впливає на читабельність, підтримуваність і ефективність команди. Хороший стиль коду дозволяє швидко зрозуміти логіку, знаходити помилки та додавати новий функціонал без ризику порушити існуючу реалізацію. Поганий стиль ускладнює роботу, збільшує час на розуміння коду і підвищує ймовірність помилок. Приклад поганого коду (рядок 1-5):
       1. def f(x,y):return x+y
       2. a=10
       3. b=5
       4. c=f(a,b)
       5. print(c)
       
     Проблеми: відсутність пробілів і зрозумілих імен змінних, функція f має непояснювальне ім’я, весь код на одному рядку — важко читати.
     Приклад хорошого коду за PEP 8 (рядок 1-19):
1. def add_numbers(x, y):
2.     """
3.     Обчислює суму двох чисел.
4. 
5.     Параметри:
6.         x (int): перше число
7.         y (int): друге число
8. 
9.     Повертає:
10.         int: сума чисел
11.     """
12.     return x + y
13. 
14. 
15. first_number = 10
16. second_number = 5
17. result = add_numbers(first_number, second_number)
18. print(result)
19.

     Переваги: чіткі імена функцій та змінних, зрозуміла логіка, наявність docstring для функції, відступи та пробіли відповідають PEP 8.
     Вплив чистоти коду на команду: швидше розуміння коду новими членами команди або тими, хто повертається до проекту, менше помилок завдяки зрозумілим іменам і структурі, легший рефакторинг, оскільки код організований і стандартизований, підвищена продуктивність команди через однаковий стиль і автоматизовані перевірки, що дозволяє зосередитися на логіці замість суперечок про оформлення. Дотримання стандартів оформлення коду та підтримка його чистоти безпосередньо підвищує ефективність командної розробки та якість кінцевого продукту.


     ВИСНОВКИ
     Правильне оформлення коду має ключове значення для читабельності, підтримуваності та ефективності командної веб-розробки. Дотримання стандартів, таких як PEP 8 у Python, забезпечує єдиний стиль коду у веб-фреймворках, зрозумілі імена моделей, view-функцій та змінних, коректні відступи, логічну структуру і використання коментарів та docstrings. Автоматизовані інструменти, такі як Black, Flake8, Pylint та Sphinx, допомагають підтримувати якість веб-проєкту і уникати помилок, а підхід TDD дозволяє створювати надійні API та ендпоінти з самого початку. Для ефективного навчання і застосування правил оформлення коду рекомендується практикувати написання чистого коду на невеликих веб-додатках, використовувати автоматичні форматувачі та перевірки стилю у своїх проєктах, писати тести перед реалізацією логіки view-функцій чи сервісів, застосовуючи TDD, ознайомитися з конвенціями для іменування, коментарів і docstrings, а також регулярно переглядати і рефакторити код, щоб підтримувати його чистоту.

     ДОДАТОК А
     Посилання на YouTube
Відеозапис презентації результатів практичного заняття: https://youtu.be/KyLcGsD_N3k

Таймкоди:
00:00 - Вступне представлення та тема доповіді
00:07 – Важливість написання чистого коду
01:02 – Правильна структура коду 
01:40 – Форматування коду 
02:26 – Іменування змінних
03:34 – Коментарі
04:19 – Документування коду
05:43 – Конвенції стилю кодування
06:59 – Кодування на основі тестування
08:06 – Інструменти та автоматизація для підтримки якості коду
09:15 – Приклади оформлення коду
10:27 – Висновки












    ДОДАТОК Б
    Графічні матеріали 
    

Рисунок Б.1 — Титульний слайд


Рисунок Б.2 — Слайд про важливість написання чистого коду

Рисунок Б.3 — Слайд про структуру коду


Рисунок Б.4 — Форматування коду

Рисунок Б.5 — Іменування змінних, функцій та класів


Рисунок Б.6 — Правила написання коментарів

Рисунок Б.7 — Документування коду


Рисунок Б.8 — Кодування на основі тестування


Рисунок Б.9 — Інструменти та автоматизація для підтримки якості коду


Рисунок Б.10 — Приклади оформлення коду


Рисунок Б.11 — Висновки


Рисунок Б.12 — Використані джерела



